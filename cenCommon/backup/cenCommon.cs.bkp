using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Globalization;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using Infragistics.Win;
using Infragistics.Win.Misc;
using Infragistics.Win.UltraWinGrid;
using Infragistics.Win.UltraWinGrid.ExcelExport;
namespace cenCommon
{
    public static class cenCommon
    {
        public static string EncryptString(string Message)
        {
            byte[] Results;
            System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();
            // Buoc 1: Bam chuoi su dung MD5

            MD5CryptoServiceProvider HashProvider = new MD5CryptoServiceProvider();
            byte[] TDESKey = HashProvider.ComputeHash(UTF8.GetBytes(GlobalVariables.EncryptPhase));

            // Step 2. Tao doi tuong TripleDESCryptoServiceProvider moi
            TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider
            {

                // Step 3. Cai dat bo ma hoa
                Key = TDESKey,
                Mode = CipherMode.ECB,
                Padding = PaddingMode.PKCS7
            };

            // Step 4. Convert chuoi (Message) thanh dang byte[]
            byte[] DataToEncrypt = UTF8.GetBytes(Message);

            // Step 5. Ma hoa chuoi
            try
            {
                ICryptoTransform Encryptor = TDESAlgorithm.CreateEncryptor();
                Results = Encryptor.TransformFinalBlock(DataToEncrypt, 0, DataToEncrypt.Length);
            }
            finally
            {
                //Xoa moi thong tin ve Triple DES va HashProvider de dam bao an toan
                TDESAlgorithm.Clear();
                HashProvider.Clear();
            }

            // Step 6. Tra ve chuoi da ma hoa bang thuat toan Base64
            return Convert.ToBase64String(Results);
        }
        public static string DecryptString(string Message)
        {
            byte[] Results;
            System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();

            // Step 1. Bam chuoi su dung MD5

            MD5CryptoServiceProvider HashProvider = new MD5CryptoServiceProvider();
            byte[] TDESKey = HashProvider.ComputeHash(UTF8.GetBytes(GlobalVariables.EncryptPhase));

            // Step 2. Tao doi tuong TripleDESCryptoServiceProvider moi
            TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider
            {

                // Step 3. Cai dat bo giai ma
                Key = TDESKey,
                Mode = CipherMode.ECB,
                Padding = PaddingMode.PKCS7
            };

            // Step 4. Convert chuoi (Message) thanh dang byte[]
            byte[] DataToDecrypt = Convert.FromBase64String(Message);

            // Step 5. Bat dau giai ma chuoi
            try
            {
                ICryptoTransform Decryptor = TDESAlgorithm.CreateDecryptor();
                Results = Decryptor.TransformFinalBlock(DataToDecrypt, 0, DataToDecrypt.Length);
            }
            finally
            {
                // Xoa moi thong tin ve Triple DES va HashProvider de dam bao an toan
                TDESAlgorithm.Clear();
                HashProvider.Clear();
            }

            // Step 6. Tra ve ket qua bang dinh dang UTF8
            return UTF8.GetString(Results);
        }
        public static String TraTuDien(String Ma)
        {
            if (Ma == null) return "";
            String rWord = Ma;
            if (GlobalVariables.dtTuDien != null && GlobalVariables.dtTuDien.Rows.Count > 0)
            {
                foreach (DataRow drTuDien in GlobalVariables.dtTuDien.Rows)
                {
                    if (drTuDien["Ma"].ToString().ToUpper() == Ma.Trim().ToUpper())
                    {
                        rWord = drTuDien["Ten"].ToString();
                        break;
                    }
                }
            }
            return rWord;
        }
        //Khai báo biến khác
        static readonly string[] strDigit = { "không ", "một ", "hai ", "ba ", "bốn ", "năm ", "sáu ", "bảy ", "tám ", "chín" };
        static readonly string[] strGroup = { "nghìn ", "triệu ", "tỷ " };
        /// <summary>
        /// Đọc group 3 số
        /// </summary>
        /// <param name="iNum">Số cần đọc</param>
        /// <returns></returns>
        private static String Group3(short iNum)
        {
            string iNumStr = null;
            byte[] iDg = new byte[3];
            string[] sResult = new string[3];
            if (iNum == 0)
            {
                return "";
            }
            iNumStr = iNum.ToString();
            while (iNumStr.Length < 3)
            {
                iNumStr = "0" + iNumStr;
            }

            iDg[2] = Convert.ToByte(iNumStr[0].ToString());
            iDg[1] = Convert.ToByte(iNumStr[1].ToString());
            iDg[0] = Convert.ToByte(iNumStr[2].ToString());

            sResult[2] = strDigit[iDg[2]] + "trăm ";
            if (iDg[1] >= 2)
            {
                sResult[1] = strDigit[iDg[1]] + "mươi ";
            }
            else if (iDg[1] == 1)
            {
                sResult[1] = "mười ";
            }
            else if (iDg[1] == 0)
            {
                sResult[1] = "lẻ ";
            }

            sResult[0] = strDigit[iDg[0]];

            if (iDg[0] == 0)
            {
                sResult[0] = "";
                if (iDg[1] == 0)
                {
                    sResult[1] = "";
                }
            }
            else if (iDg[0] == 1 && iDg[1] >= 2)
            {
                sResult[0] = "mốt ";
            }
            else if (iDg[0] == 5 && iDg[1] >= 1)
            {
                sResult[0] = "lăm ";
            }

            return sResult[2] + sResult[1] + sResult[0];
        }
        /// <summary>
        /// Đọc tiền bằng chữ
        /// </summary>
        /// <param name="iNum">Chuỗi tiền</param>
        /// <returns></returns>
        public static String SoTienBangChu(string iNum)
        {
            try
            {
                short iG = 0;
                byte k = 0;
                string st = null;
                string s = "";
                for (short i = Convert.ToInt16((iNum.Length - 6)); i >= iNum.Length % 3; i += -3)
                {
                    iG = short.Parse(iNum.Substring(i, 3));
                    st = Group3(iG);
                    if (!string.IsNullOrEmpty(st))
                    {
                        st += strGroup[k];
                    }
                    else if (k % 3 == 2)
                    {
                        st = strGroup[k];
                    }
                    k = Convert.ToByte(((k + 1) % 3));
                    s = st + s;
                }
                if (iNum.Length % 3 != 0 && iNum.Length > 3)
                {
                    iG = short.Parse(iNum.Substring(0, iNum.Length % 3));
                    st = Group3(iG);
                    st += strGroup[k];
                    s = st + s;
                }
                s = s + Group3(short.Parse(iNum.Substring(Math.Max(iNum.Length - 3, 0))));
                if (string.IsNullOrEmpty(s))
                {
                    s = "không";
                }
                else if (s.Substring(0, 13) == "không trăm lẻ")
                {
                    s = s.Substring(14);
                }
                else if (s.Substring(0, 11) == "không trăm ")
                {
                    s = s.Substring(11);
                }
                s = s.Substring(0, 1).ToUpper() + s.Substring(1);
                return s;
            }
            catch (Exception ex)
            {
                ErrorMessageOkOnly(ex.Message);
                return null;
            }
        }
        //Đổi màu từ UInt sang Color - dùng để bôi màu column header và detail bold
        public static Color UIntToColor(uint color)
        {
            byte a = (byte)(color >> 24);
            byte r = (byte)(color >> 16);
            byte g = (byte)(color >> 8);
            byte b = (byte)(color >> 0);
            return Color.FromArgb(a, r, g, b);
        }
        public static uint ColorToUInt(Color color)
        {
            return (uint)((color.A << 24) | (color.R << 16) |
                          (color.G << 8) | (color.B << 0));
        }
        /// <summary>
        /// Thông báo lỗi, OkOnly, lấy theo MessageID hoặc Message nếu MessageID=0
        /// </summary>
        /// <param name="Message">Chuỗi hiển thị nếu MessageID=0</param>
        public static void ErrorMessageOkOnly(string Message)
        {
            MessageBox.Show(Message, "Chú ý!", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        /// <summary>
        /// Yêu cầu xác nhận
        /// </summary>
        /// <param name="Message">Chuỗi hiển thị</param>
        /// /// <param name="Caption">Chuỗi hiển thị tiêu đề cửa sổ</param>
        /// <param name="DialogType">0: YesNo, 1: YesNoCancel</param>
        public static DialogResult QuestionMessage(string Message, Byte DialogType)
        {
            DialogResult KetQua;
            KetQua = MessageBox.Show(Message, "Xác nhận!", (DialogType == 0) ? MessageBoxButtons.YesNo : MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
            return KetQua;
        }
        public static void InfoMessage(string Message)
        {
            UltraDesktopAlert uDA = new UltraDesktopAlert
            {
                UseAppStyling = false,
                UseOsThemes = DefaultableBoolean.False
            };
            UltraDesktopAlertShowWindowInfo uDAInfo = new UltraDesktopAlertShowWindowInfo
            {
                ScreenPosition = ScreenPosition.TopRight,
                Caption = "Thông báo",
                Text = Message
            };
            uDA.Show(uDAInfo);
        }
        public static void filterGrid(UltraGrid ug, String filterText)
        {
            UltraGridBand uBand = null;
            uBand = (ug != null && ug.DisplayLayout.Bands.Count > 0) ? ug.DisplayLayout.Bands[0] : null;
            if (uBand != null && uBand.Columns.Exists("filterColumn"))
            {
                uBand.Columns["filterColumn"].AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True;
                uBand.ColumnFilters["filterColumn"].FilterConditions.Clear();
                uBand.ColumnFilters["filterColumn"].FilterConditions.Add(FilterComparisionOperator.Contains, filterText);
                if (ug.Rows.GetFilteredInNonGroupByRows().Count() > 0)
                {
                    ug.ActiveRow = ug.Rows.GetFilteredInNonGroupByRows()[0];
                    ug.ActiveRow.Selected = true;
                }
                else
                {
                    ug.ActiveRow = null;
                }
            }
        }
        public static void ExportGrid2Excel(UltraGrid ug)
        {
            String FileName = OpenSaveFileDialog("Excel file (*.xls)|*.xls");
            if (FileName != "")
            {
                UltraGridExcelExporter ugE = new UltraGridExcelExporter();
                ugE.Export(ug, FileName, Infragistics.Documents.Excel.WorkbookFormat.Excel97To2003);
                ugE.Dispose();
                cenCommon.InfoMessage("Kết xuất thành công!");
            }
        }
        public static String OpenSaveFileDialog(String FileExtension)
        {
            SaveFileDialog openFileDlg = new SaveFileDialog
            {
                InitialDirectory = Application.StartupPath,
                Filter = FileExtension,
                RestoreDirectory = true
            };
            if (openFileDlg.ShowDialog() == DialogResult.OK)
            {
                return openFileDlg.FileName;
            }
            else
                return DBNull.Value.ToString();
        }
        public static String OpenFileDialog(String FileExtension)
        {
            OpenFileDialog openFileDlg = new OpenFileDialog
            {
                InitialDirectory = Application.StartupPath,
                Filter = FileExtension,
                RestoreDirectory = true
            };
            if (openFileDlg.ShowDialog() == DialogResult.OK)
            {
                return openFileDlg.FileName;
            }
            else
                return DBNull.Value.ToString();
        }
        public static Object NgayHachToan()
        {
            DateTime Ngay;
            try
            {
                SqlConnection connection = new SqlConnection(GlobalVariables.ConnectionString);
                SqlCommand sqlCMD = new SqlCommand("select GetDate()", connection)
                {
                    CommandType = CommandType.Text
                };
                connection.Open();
                Ngay = Convert.ToDateTime(sqlCMD.ExecuteScalar());
                connection.Close();
                return Ngay;
            }
            catch
            {
                return DateTime.Now;
            }
        }
        public static String ChuanHoaChuoi(String Chuoi)
        {
            Chuoi = Chuoi.Trim();
            Chuoi = Chuoi.Replace("\n", "");
            return Chuoi;
        }
        public static String ChuanHoaChuoiUpper(String Chuoi)
        {
            Chuoi = Chuoi.Trim();
            Chuoi = Chuoi.Replace("\n", "");
            Chuoi = Chuoi.ToUpper();
            return Chuoi;
        }
        public static String ChuoiNgayDDMMYYY(String ChuoiNgay)
        {
            String Ngay = ChuoiNgay.Substring(0, 2);
            String Thang = ChuoiNgay.Substring(3, 2);
            String Nam = ChuoiNgay.Substring(6, 4);
            String Gio = (ChuoiNgay.Length == 10) ? "00" : ChuoiNgay.Substring(11, 2);
            String Phut = (ChuoiNgay.Length == 10) ? "00" : ChuoiNgay.Substring(14, 2);
            String Giay = (ChuoiNgay.Length == 10) ? "00" : ChuoiNgay.Substring(17, 2);
            return Nam + "/" + Thang + "/" + Ngay + " " + Gio + ":" + Phut + ":" + Giay;
        }
        public static Decimal Convert2Decimal(object DecNum)
        {
            if (DecNum == null || DecNum == DBNull.Value)
                return 0;
            else
            {
                Decimal.TryParse(DecNum.ToString(), out decimal dNum);
                return dNum;
            }
        }
        public static Double Convert2Double(object DecNum)
        {
            if (DecNum == null || DecNum == DBNull.Value)
                return 0;
            else
            {
                Double.TryParse(DecNum.ToString(), out double dNum);
                return dNum;
            }
        }
        public static Boolean CheckNumberNullOrZero(object DecNum)
        {
            if (DecNum == null || DecNum == DBNull.Value)
                return true;
            else
            {
                return Convert.ToDecimal(DecNum) == 0;
            }
        }
        public static byte[] imageToByteArray(System.Drawing.Image imageIn)
        {
            MemoryStream ms = new MemoryStream();
            imageIn.Save(ms, System.Drawing.Imaging.ImageFormat.Gif);
            return ms.ToArray();
        }
        public static Image byteArrayToImage(byte[] byteArrayIn)
        {
            MemoryStream ms = new MemoryStream(byteArrayIn);
            Image returnImage = Image.FromStream(ms);
            return returnImage;
        }
        public static void SetGridColumnWidth(UltraGridColumn column)
        {
            String ColumnKey = column.Key.ToUpper();
            if (column.DataType == typeof(string))
            {
                if (ColumnKey == "SO" || ColumnKey == "MA" || ColumnKey == "KYHIEU" || ColumnKey == "LOAIMANHINH" || ColumnKey.StartsWith("MADANHMUC") || ColumnKey.StartsWith("DONVITINH"))
                    column.Width = GlobalVariables.DoRongCotMaGrid;
                else
                    column.Width = GlobalVariables.DoRongCotDienGiaiGrid;
            }
            else
                column.Width = GlobalVariables.DoRongCotKhacGrid;
        }
        public static void SetGridColumnMask(UltraGridColumn column)
        {
            String ColumnKey = column.Key.ToUpper();
            if (column.DataType == typeof(DateTime))
                column.MaskInput = GlobalVariables.MaskInputDate;
            if (column.DataType == typeof(Double))
            {
                column.CellAppearance.TextHAlign = HAlign.Right;
                if (ColumnKey.StartsWith("DONGIA") || ColumnKey.StartsWith("SOTIEN"))
                {
                    column.Format = GlobalVariables.FormatTien;
                    column.MaskInput = GlobalVariables.DinhDangNhapTien;
                } 
                else
                {
                    column.Format = GlobalVariables.FormatSoLuong;
                    column.MaskInput = GlobalVariables.DinhDangNhapSoLuong;
                }   
            }
        }

    }
    public static class LoaiManHinh
    {
        public const string PhieuXeVaoID = "XEVAO";
        public const string PhieuXeVaoName = "Phiếu xe vào";
        public const string PhieuDichVuID = "DICHVU";
        public const string PhieuDichVuName = "Phiếu dịch vụ";
        public const string PhieuThuID = "THU";
        public const string PhieuThuName = "Phiếu thu";
        public const string PhieuDieuChinhID = "DIEUCHINH";
        public const string PhieuDieuChinhName = "Phiếu điều chỉnh";
        public const string PhieuXeRaID = "XERA";
        public const string PhieuXeRaName = "Phiếu xe ra";
    }
    public static class ThamSoHeThong
    {
        //THAM SỐ HỆ THỐNG
        //Tham số loại đối tượng
        public const String MaThamSoLoaiDoiTuongNguonGocXe = "MaLoaiDoiTuong_NguonGocXe"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongLoaiXe = "MaLoaiDoiTuong_LoaiXe"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongXe = "MaLoaiDoiTuong_Xe"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongBai = "MaLoaiDoiTuong_Bai"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongDichVu = "MaLoaiDoiTuong_DichVu"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongKhachHang = "MaLoaiDoiTuong_KhachHang"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongLoaiHangHoa = "MaLoaiDoiTuong_LoaiHangHoa"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongLoaiDichVu = "MaLoaiDoiTuong_LoaiDichVu"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoLoaiDoiTuongToCongNhan = "MaLoaiDoiTuong_ToCongNhan"; //Tham số tên cột định dạng ngày tháng trên grid, report

        public const String MaThamSoTenCotNgayThang = "3001"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoTenCotThoiGian = "3026"; //Tham số tên cột định dạng ngày tháng trên grid, report
        public const String MaThamSoTenCotSoLuong = "3002"; //Tham số tên cột định dạng số lượng trên grid, report
        public const String MaThamSoTenCotTrongLuong = "3003"; //Tham số tên cột định dạng trọng lượng trên grid, report
        public const String MaThamSoTenCotKhoiLuong = "3004"; //Tham số tên cột định dạng khối lượng trên grid, report
        public const String MaThamSoTenCotDonGia = "3005"; //Tham số tên cột định dạng đơn giá trên grid, report
        public const String MaThamSoTenCotSoTien = "3006"; //Tham số tên cột định dạng số tiền trên grid, report
        public const String MaThamSoTenCotMaSo = "3007"; //Tham số tên cột định dạng mã số grid, report
        public const String MaThamSoTenCotDienGiai = "3008"; //Tham số tên cột định dạng mã số grid, report

        public const String MaThamSoDoRongCotNgayThangGrid = "3009"; //Tham số độ rộng cột ngày tháng trên grid
        public const String MaThamSoDoRongCotSoLuongGrid = "3010"; //Tham số độ rộng cột số lượng trên grid
        public const String MaThamSoDoRongCotTrongLuongGrid = "3011"; //Tham số độ rộng cột định dạng trọng lượng trên grid
        public const String MaThamSoDoRongCotKhoiLuongGrid = "3012"; //Tham số độ rộng cột định dạng khối lượng trên grid
        public const String MaThamSoDoRongCotDonGiaGrid = "3013"; //Tham số độ rộng cột định dạng đơn giá trên grid
        public const String MaThamSoDoRongCotSoTienGrid = "3014"; //Tham số độ rộng cột định dạng số tiền trên grid
        public const String MaThamSoDoRongCotMaSoGrid = "3015"; //Tham số độ rộng cột định dạng mã số grid
        public const String MaThamSoDoRongCotDienGiaiGrid = "3016"; //Tham số độ rộng cột định dạng mã số grid

        public const String MaThamSoDoRongCotNgayThangReport = "3017"; //Tham số độ rộng cột ngày tháng trên report
        public const String MaThamSoDoRongCotSoLuongReport = "3018"; //Tham số độ rộng cột số lượng trên report
        public const String MaThamSoDoRongCotTrongLuongReport = "3019"; //Tham số độ rộng cột định dạng trọng lượng trên report
        public const String MaThamSoDoRongCotKhoiLuongReport = "3020"; //Tham số độ rộng cột định dạng khối lượng trên report
        public const String MaThamSoDoRongCotDonGiaReport = "3021"; //Tham số độ rộng cột định dạng đơn giá trên report
        public const String MaThamSoDoRongCotSoTienReport = "3022";//Tham số độ rộng cột định dạng số tiền trên report
        public const String MaThamSoDoRongCotMaSoReport = "3023"; //Tham số độ rộng cột định dạng mã số report
        public const String MaThamSoDoRongCotDienGiaiReport = "3024"; //Tham số độ rộng cột định dạng mã số report

        public const String MaThamSoTenCotDropdown = "3025"; //Tham số tên cột dropdown

        public const String MaThamSoHoaDonMau = "HOADON_01"; //Mẫu hoá đơn mặc định
        public const String MaThamSoHoaDonKyHieu = "HOADON_02"; //Ký hiệu hoá đơn mặc định
    }
    public static class GlobalVariables
    {
        //Chuỗi kết nối
        public static String ConnectionString = @"Data Source=45.119.82.200;Initial Catalog=QUANLYXETANDAIDUONG;Persist Security Info=True;User ID=QUANLYXETANDAIDUONG;Password=tu1den8;Connect Timeout=60";
        //public static String ConnectionString = @"Data Source=.\SQLEXPRESS;Initial Catalog=QUANLYXETANDAIDUONG;Persist Security Info=True;User ID=sa;Password=12365478;Connect Timeout=60";
        //File chứa danh sách kết nối
        public static String ConnectionFileName = Application.StartupPath + @"\DataConnects.xml";
        //Chuỗi kết nối webAPI
        public static String WebAPIConnectionString = "http://45.119.82.200/cenQUANLYXETANDAIDUONG/api/";
        //Controller and Action Code String
        public static string DanhMucDonViController = "DanhMucDonVi";
        public static string DanhMucDonViListActionCode = "List_" + DanhMucDonViController;
        public static string DanhMucDonViInsertActionCode = "Insert_" + DanhMucDonViController;
        public static string DanhMucDonViUpdateActionCode = "Update_" + DanhMucDonViController;
        public static string DanhMucDonViDeleteActionCode = "Delete_" + DanhMucDonViController;
        //Khai báo chung
        //Tiền tố
        public const String prefix_DataRelation = "rlt";
        //Tham số định dạng cột dữ liệu
        public static String TenCotNgayThang = "";
        public static String TenCotThoiGian = "";
        public static String TenCotSoLuong = "";
        public static String TenCotKhoiLuong = "";
        public static String TenCotTrongLuong = "";
        public static String TenCotTien = "";
        public static String TenCotGia = "";
        public static String TenCotMaSo = "";
        public static String TenCotDienGiai = "";

        public static Int16 DoRongCotMaGrid = 100;
        public static Int16 DoRongCotDienGiaiGrid = 220;
        public static Int16 DoRongCotKhacGrid = 80;

        public static Double DoRongCotNgayThangReport = 1;
        public static Double DoRongCotSoLuongReport = 1.5;
        public static Double DoRongCotKhoiLuongReport = 1.5;
        public static Double DoRongCotTrongLuongReport = 1.5;
        public static Double DoRongCotTienReport = 1.5;
        public static Double DoRongCotGiaReport = 1;
        public static Double DoRongCotMaSoReport = 1;
        public static Double DoRongCotDienGiaiReport = 4;

        public static String TenCotDropdown = "(loaimanhinh)(loaidonvitinh)(iddanhmucdonvitinhsoluong)(iddanhmucdonvitinhtrongluong)(iddanhmucdonvitinhkhoiluong)(iddanhmucloaicont)(phuongphaptinhgia)(phamviapdung)(loaiphi)(kieulamtron)(khogiay)(huongin)(cachtinhgia)(contsize)(conttype)(tenmayin)(hinhthucthanhtoan)";
        //Từ điển
        public static DataTable dtTuDien;
        //Tham số thông tin đơn vị
        public static object IDDonVi = 8;
        public static String TenDonViCapTren = "";
        public static String TenDonVi = "CÔNG TY TNHH VẬN TẢI DUYÊN HẢI - KHO TASACO";
        public static String DiaChi = "";
        public static String MaSoThue = "";
        public static String TenKtt = "";
        public static String TenGiamDoc = "";
        public static String TenThuQuy = "";
        public static String MauBaoCaoNoiDung = "";
        //Tham số ngôn ngữ
        public static CultureInfo ci = CultureInfo.CreateSpecificCulture("vi-VN");


        public static String FormatThoiGian = "dd/MM/yyyy HH:mm:ss"; //Chuỗi định dạng thời gian
        public static String FormatNgayThangNam = "dd/mm/yyyy"; //Chuỗi định dạng ngày tháng năm
        public static String FormatNgayThang = "dd/mm"; //Chuỗi định dạng ngày tháng

        public static String MaskInputDateTime = "dd/mm/yyyy hh:mm:ss"; //Chuỗi định dạng ngày giờ
        public static String MaskInputDate = "dd/mm/yyyy"; //Chuỗi định dạng ngày tháng
        public static String MaskInputTime = "hh:mm"; //Chuỗi định dạng giờ


        public static String DecimalSymbol = ","; //Dấu phân cách hàng thập phân
        public static String DigitSymbol = "."; //Dấu phân cách hàng nghìn
        public static String FormatTien = "##,##0"; //Format 
        public static String DinhDangNhapTien = "-nnn,nnn,nnn,nnn,nnn,nnn";
        public static String FormatGia = "";
        public static String DinhDangNhapGia = "-nnn,nnn,nnn,nnn,nnn,nnn";
        public static String FormatSoLuong = "##,##0.00";
        public static String DinhDangNhapSoLuong = "-nnn,nnn,nnn,nnn,nnn,nnn.nnn";
        public static String FormatTrongLuong = "";
        public static String DinhDangNhapTrongLuong = "-nnn,nnn,nnn,nnn,nnn,nnn";
        public static String FormatKhoiLuong = "";
        public static String DinhDangNhapKhoiLuong = "-nnn,nnn,nnn,nnn,nnn,nnn";

        public static Int16 LamTronSoLuong = 3;
        public static Int16 LamTronTrongLuong = 3;
        public static Int16 LamTronKhoiLuong = 3;
        public static Int16 LamTronDonGia = 0;
        public static Int16 LamTronSoTien = 0;

        //Than số người sử dụng đăng nhập
        public static object IDDanhMucNguoiSuDung = "";
        public static String MaDanhMucNguoiSuDung = "";
        public static String TenDanhMucNguoiSuDung = "";
        public static String Password = "";
        public static object IDDanhMucPhanQuyen = "";
        public static Boolean isAdmin = false;
        public static Boolean Logged = false;
        public static Boolean CanLogout = true;
        //Tham số đường dẫn chứa file tạm
        public static String TempDir = Application.StartupPath + @"\Temp\";
        //Tham số đường dẫn report
        public static String ChungTuReportPath = Application.StartupPath + @"\Reports\ChungTu\";
        public static String BaoCaoReportPath = Application.StartupPath + @"\Reports\BaoCao\";
        //Tham số file report in chứng từ
        public static String rptChungTuBanHang = ChungTuReportPath + "rpt_chungtu_banhang.rpt";
        //
        public static String importFileName = "";
        public static String importSheetName = "";
        public static Int32 importFromRow = 4;
        public static Int32 importToRow = 200;
        //Danh sách tham số hệ thống toàn cục
        public const String GlobalSqlParametersList = "(@IDDONVI)(@IDDANHMUCNGUOISUDUNGCREATE)(@IDDANHMUCNGUOISUDUNGEDIT)(@CREATEDATE)(@EDITDATE)(@NAMLAMVIEC)(@IDDANHMUCNGONNGU)";
        //Chuỗi mã hóa
        public const string EncryptPhase = "c@e1n2t3e4c5h6";
    }

}
